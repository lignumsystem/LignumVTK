///\file LignuVTKTree.h
///Convert Lignum tree to VTP file format for Paraview 
#ifndef LIGNUMVTK_TREE_H
#define LIGNUMVTK_TREE_H
#include <cassert>
#include <vector>
#include <numeric>
#include <TLSTree.h>
#include <LignumVTK.h>
using namespace LignumTLS;

namespace lignumvtk{
  ///\defgroup VTKconstants Constants used in LignumVTKTree
  ///*{
  ///\brief Petiole line segment width (in pixels) for visualzation.
  ///\note For VTK the minimum value is 1.
  const double LINE_WIDTH = 1.0;
  ///\brief Resolution for spline tube rectangular sides in visualization.
  const int TUBE_NUMBER_OF_SIDES = 30;
  ///\brief Technical minimum segment radius for visualization 
  ///\sa CollectTSData::operator()
  const double MIN_SEGMENT_RADIUS = 1e-05;
  ///\brief Tree segment radius as tube radius scalar
  const string TUBE_RADIUS_SCALAR = "LGAR";
  ///\brief BroadLeaf Petiole scalar
  const string LINE_WIDTH_SCALAR="PetioleWidth";
  ///*}
  
  ///\brief Data to be collected from tree segments.
  ///
  ///Points collected will be used to construct VTK geometric objects representing tree including
  ///tree segment tubes, petioles and leaves. The data of interest can be associated as
  ///scalar values with the points and further in the geometric objects to  be constructed.  
  ///\sa  LignumToVTK::treeToTSData
  class TreeSegmentDataCollection{
  public:
    std::vector<cxxadt::Point> vpoints;///< Vector of points of interest to construct geometry of the object
    std::vector<double> vL;///< Vector of (segment) lengths in one axis
    std::vector<double> vR;///< Vector of segment radii in one axis
    std::vector<double> vRh;///< Vector of segment heartwood radii in one axis
    std::vector<double> vRf;///< Vector of segment radii to foliage limit
    std::vector<double> vWf;///< Vector of foliage mass
    std::vector<string> vname;///< Vector for scalar name
  };
  ///\defgroup VTKtypes Short aliases for complex VTK type names
  ///*{
  typedef Tree<TLSSegment,TLSBud> LignumVTKTree;
  typedef TreeSegmentDataCollection TSData;
  typedef std::vector<TSData> TSDataVector;
  typedef vtkSmartPointer<vtkLine> Lineptr;
  typedef vtkSmartPointer<vtkParametricFunctionSource>  PFSptr;
  typedef vtkSmartPointer<vtkTubeFilter> TFptr;
  typedef vtkSmartPointer<vtkPolyDataMapper> PDMptr;
  typedef vtkSmartPointer<vtkActor> Actorptr;
  typedef std::vector<vtkSmartPointer<vtkLine>> LineVector;
  typedef std::vector<vtkSmartPointer<vtkParametricFunctionSource>> PFSVector;
  typedef std::vector<vtkSmartPointer<vtkTubeFilter>> TubeFilterVector;
  typedef std::vector<vtkSmartPointer<vtkPolyDataMapper>> TubeMapperVector;
  typedef std::vector<vtkSmartPointer<vtkActor>> TubeActorVector;
  typedef TubeActorVector LineActorVector;
  ///*}

  ///\brief Append two vectors
  ///\param v1 The first vector
  ///\param v2 The second vector
  ///\retval v1 The vector \p v1 with \p v2 appended
  inline TSDataVector& Append(TSDataVector& v1,TSDataVector& v2)			    
  {
    v1.insert(v1.end(),v2.begin(),v2.end());
    return v1;
  }

  ///\brief Create and append new VTK tube actors to a vector of tube actors
  ///
  ///Use the functor with std::accumulate
  class CreateVTKTubeActor{
  public:
    ///\brief Create and append one actor to the vector \p v
    ///
    ///Create a new actor and associate polydata mapper \p pdm with it 
    ///\param v Vector of VTK tube actors
    ///\param pdm VTK polydata mapper
    ///\return TubeActorVector with new tube actor appended
    TubeActorVector& operator()(TubeActorVector& v, PDMptr pdm)const;
  };

  ///\brief Create and append new VTK tube mappers to a vector of tube mappers
  ///
  ///Use the functor with std::accumulate
  class CreateVTKTubeMapper{
  public:
    ///\brief Create and append one tube mapper to the vector \p v
    ///
    ///Create a new  tube mapper and associate tube filter \p tf with it
    ///\param v Vector of VTK tube mappers
    ///\param tf VTK tube filter
    ///\return TubeMapperVector with new tube mapper appended
    TubeMapperVector& operator()(TubeMapperVector& v, TFptr tf)const;
  };

  ///\brief Create and append new VTK tube filters to a vector of tube filters
  ///
  ///Use the functor with std::accumulate
  class CreateVTKTubeFilter{
  public:
    ///Create and append one tube filter to the vector \p v
    ///
    ///Create a new  tube mapper and associate parametric function source \p fs with it
    ///\param v Vector of VTK tube filters
    ///\param fs VTK parametric function source
    ///\return TubeFilterVector with new tube filter appended
    TubeFilterVector& operator()(TubeFilterVector& v,PFSptr fs)const;
  };

  ///\brief Create line actor vector for leaf petioles
  ///
  ///Create lines from petiole points and create line actor for each line
  ///Use the functor with std::accumulate
  class CreateVTKLineActor{
  public:
    ///\brief Create line actor
    ///
    ///Create a line from petiole base and end points and construct line actor. Append line actor to
    ///vector \p v.
    ///\param v Vector for VTK actors
    ///\param data Data for petiole base and end points
    ///\retval v TubeActor vector with new actor appended
    LineActorVector& operator()(LineActorVector& v, TSData& data)const;
  };
  
  ///\brief Create splines from tree segment points.
  ///
  ///Use the functor with std::accumulate.
  class CreateVTKSpline{
  public:
    ///\brief Constructor
    ///\param r Spline tube lengthwise resolution
    CreateVTKSpline(int r):resolution(r){}
    ///Create and append one spline to the vector \p v
    ///\param v Vector of spline tubes
    ///\param data Data collected (points and scalars) from tree segments in one axis
    ///\post The number of spline points is \f$N\times r + 1\f$
    ///where \f$N\f$ is the number of tree segment points and \f$ r \f$ spline resolution. 
    ///\return PFSVector with the new spline appended
    PFSVector& operator()(PFSVector& v, TSData& data)const;
  private:
    int resolution;///< Spline  lengthwise resolution 
  };

  ///\brief Collect petiole data
  ///
  ///Use this functor with Lignum::AccumulateDown and LignumVTK::Append.
  template<class TS, class BUD,class S>
  class CollectPetioleData{
  public:
    ///\brief Collect petiole data from broadleaved segments
    ///
    ///Collect the two petiole points and set radius for visualisation.
    ///Pass the data with TSData. 
    ///\param v Vector of petiole data
    ///\param tc Tree compartment (tree segment, axis, branching point or bud)
    ///\retval v TSData element with petiole data appended to \p v
    ///\sa PETIOLE_RADIUS
    ///\sa TSData
    TSDataVector& operator()(TSDataVector& v, TreeCompartment<TS,BUD>* tc)const;
  };
  
  ///\brief Collect data from tree segments in one axis
  ///
  ///Collect data from tree segments, points and scalar values.
  ///Data from segments is represented in TSData.
  ///Use this functor with Lignum::AccumulateDown and LignumVTK::Append.
  ///\sa LignumToVTK::treeToTSData
  template<class TS, class BUD>
  class CollectTSData{
  public:
    ///\brief Collect data from segments
    ///
    ///Create a new TSData data element in bud and append it to vector \p v.
    ///Collect data from tree segments with Lignum::AccumulateDown.
    ///\param v Vector of tree segment data for axes.
    ///\param tc Tree compartment (tree segment, axis, branching point or bud).
    ///\retval v TSData element appended in bud and updated in subsequent tree segments.
    TSDataVector& operator()(TSDataVector& v, TreeCompartment<TS,BUD>* tc)const;
  };

  ///\brief Read Lignum XML file and produce VTK/VTM file for Paraview
  class LignumToVTK{
  public:
    ///\brief Constructor
    ///\param r Spline segment lengthwise resolution
    LignumToVTK(int r=10):resolution(r){}
    ///\brief Collect data from tree segments.
    ///
    ///Collect tree segment points for spline tube representation.
    ///Collect scalar values of interest.
    ///\param t Lignum tree
    ///\param tsdv Vector for data collection
    ///\retval tsdv Vector containing collected data
    ///\post  The \p tsdv  a single one dimensional vector.
    ///Each LignumVTK::TSData element in \p tsdv contain data from all segments in a single axis.
    TSDataVector& treeToTSData(LignumVTKTree& t, TSDataVector& tsdv);
    LineActorVector& createLineActors(TSDataVector& tsdv,LineActorVector& lav);
    ///\brief Collect petiole data.
    ///
    ///Collect data points from leaf petioles for spline tube representation.
    ///\param t Lignum tree
    ///\param tsdv Vector for data collection
    ///\retval tsdv Vector containing collected petiole data
    ///\post Each TSData element in \p tsdv represents one petiole
    ///\sa PETIOL_RADIUS
    ///\sa TSData
    TSDataVector& treeToPetioleData(LignumVTKTree& t, TSDataVector& tsdv);
    ///\brief Create splines.
    ///
    ///Create splines from segment points returned by LignumToVTK::treeToTSData.
    ///\param tsdv Vector for tree segment points
    ///\param pfsv Vector for splines
    ///\retval psfv Vector containing splines
    ///\note The vtkParametricSpline class used creates 1D interpolating splines. 
    PFSVector& vtkPointsToVtkSpline(TSDataVector& tsdv, PFSVector& pfsv) ;
    ///\brief Add spline tube radius data.
    ///
    ///Use tree segment radius scalar data to set spline tube radius for each spline point.
    ///These are returned by LignumToVTK::treeToTSData and LignumToVtk::vtkPointsToVtkSpline respectively
    ///\param tsdv Vector containg collected tree segment data from LignumToVTK::treeToTSData
    ///\param psfv Vector for splines with their radii in each point
    ///\retval psfv Vector containg splines and radii for each spline point 
    PFSVector& createTubeRadiusScalars(TSDataVector& tsdv, PFSVector& pfsv);
    ///\brief Create spline tube filters
    ///
    ///Create spline tube filters for each spline returned by LignumToVTK::vtkPointsToVtkScalars.
    ///\param pfsv Vector containing splines and their radii
    ///\param tfv Vector for spline tube filters
    ///\retval tfv Vector containing  spline tube filters
    TubeFilterVector& createTubeFilters(PFSVector& pfsv, TubeFilterVector& tfv)const;
    ///\brief Create spline tube filter mappers.
    ///
    ///Create  spline tube filter mappers for each spline filter
    ///returned by LignumToVTK::createTubeFilters.
    ///\param tfv Vector containing spline tube filters
    ///\param tmv Vector for spline tube filter mappers
    ///\retval tmv Vector containing spline tube filter mappers
    TubeMapperVector& createTubeMappers(TubeFilterVector& tfv,TubeMapperVector& tmv)const;
    ///\brief Create actors for mappers.
    ///
    ///Create actors for mappers returnd by LignumToVTK::createTubeMappers.
    ///\param tmv Vector containing mappers
    ///\param tav Vector for actors
    ///\retval tav Vector containing actors
    TubeActorVector& createTubeActors(TubeMapperVector& tmv, TubeActorVector& tav)const;
    ///\brief Populate renderer with actors
    ///\sa LignumToVTK::renderer
    LignumToVTK& addActorsToRenderer(TubeActorVector& v);
    LignumToVTK& setActorColor(const string& color);
    ///\brief Write Lignum tree VTK representation to VTP file
    ///\pre VTK representation is constructed and assigned to LignumToVTK::renderer
    LignumToVTK& writeVTKFile(const string& file_name);
    vtkRenderer* getRenderer(){return renderer;}
  private:
    vtkNew<vtkMultiBlockDataSet> mb_set;///< Dataset for VTK geometry models
    vtkNew<vtkRenderer> renderer;///< VTK renderer
    vtkNew<vtkXMLMultiBlockDataWriter> writer;///< File output for VTK MultiBlock data sets
    int resolution;///< Spline resolution, number of spline segments
  };
}
#include <LignumVTKTreeI.h>
#endif
